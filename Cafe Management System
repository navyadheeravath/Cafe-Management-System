{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ae67b23-e746-4aa5-9628-85d07c6d7600",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Cafe Management System ===\n",
      "\n",
      "1) New Order\n",
      "2) Manage Menu\n",
      "3) View Orders & Today's Summary\n",
      "4) Settings (Tax/Discount/Currency)\n",
      "5) Print Last Receipt\n",
      "6) Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== New Order ===\n",
      "\n",
      "ID   | Category     | Name                  | Price | Avail\n",
      "------------------------------------------------------------------\n",
      "  1  | Beverage     | Espresso             | 120.00 | Yes\n",
      "  2  | Beverage     | Cappuccino           | 160.00 | Yes\n",
      "  3  | Beverage     | Cold Coffee          | 150.00 | Yes\n",
      "  4  | Beverage     | Masala Tea           |  60.00 | Yes\n",
      "  5  | Food         | Veg Sandwich         | 140.00 | Yes\n",
      "  6  | Food         | Cheese Sandwich      | 170.00 | Yes\n",
      "  7  | Food         | French Fries         | 100.00 | Yes\n",
      "  8  | Food         | Veg Burger           | 180.00 | Yes\n",
      "  9  | Dessert      | Chocolate Brownie    | 110.00 | Yes\n",
      " 10  | Dessert      | Ice Cream Scoop      |  90.00 | Yes\n",
      " 11  | Dessert      | Muffin               |  75.00 | Yes\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter item number (or blank to stop):  4\n",
      "Qty for 'Masala Tea' (default 1):  1\n",
      "Add note (leave blank if none):  \n",
      "Add another item? (y/n):  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Current Subtotal: ₹60.00\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"\n",
    "Cafe Management System (CLI, single-file)\n",
    "-----------------------------------------\n",
    "Features:\n",
    "  - Preloaded menu with items & prices.\n",
    "  - Persistent JSON storage (menu, orders, config).\n",
    "  - Add/Edit/Delete menu items.\n",
    "  - Create orders: multiple items, quantities, notes.\n",
    "  - Tax and discount support (configurable).\n",
    "  - Receipt printing with change due and order history.\n",
    "  - Simple reports: daily sales summary.\n",
    "\n",
    "Run:\n",
    "  python cafe_management.py\n",
    "\n",
    "Files created automatically in ./data :\n",
    "  - menu.json, orders.json, config.json\n",
    "\"\"\"\n",
    "import json, os, sys, uuid\n",
    "from dataclasses import dataclass, asdict\n",
    "from datetime import datetime, date\n",
    "from typing import List, Dict, Optional\n",
    "\n",
    "BASE_DIR = os.getcwd()   # use current working directory\n",
    "DATA_DIR = os.path.join(BASE_DIR, \"data\")\n",
    "\n",
    "MENU_FILE = os.path.join(DATA_DIR, \"menu.json\")\n",
    "ORDERS_FILE = os.path.join(DATA_DIR, \"orders.json\")\n",
    "CONFIG_FILE = os.path.join(DATA_DIR, \"config.json\")\n",
    "\n",
    "def ensure_data_dir():\n",
    "    os.makedirs(DATA_DIR, exist_ok=True)\n",
    "\n",
    "def load_json(path, default):\n",
    "    try:\n",
    "        with open(path, \"r\", encoding=\"utf-8\") as f:\n",
    "            return json.load(f)\n",
    "    except FileNotFoundError:\n",
    "        return default\n",
    "    except json.JSONDecodeError:\n",
    "        print(f\"[WARN] {os.path.basename(path)} corrupted. Recreating.\", file=sys.stderr)\n",
    "        return default\n",
    "\n",
    "def save_json(path, data):\n",
    "    with open(path, \"w\", encoding=\"utf-8\") as f:\n",
    "        json.dump(data, f, indent=2, ensure_ascii=False)\n",
    "\n",
    "# -------------------- Data Models --------------------\n",
    "@dataclass\n",
    "class MenuItem:\n",
    "    id: str\n",
    "    name: str\n",
    "    category: str\n",
    "    price: float\n",
    "    available: bool = True\n",
    "\n",
    "@dataclass\n",
    "class OrderItem:\n",
    "    item_id: str\n",
    "    name: str\n",
    "    unit_price: float\n",
    "    qty: int\n",
    "    note: str = \"\"\n",
    "\n",
    "    @property\n",
    "    def total(self) -> float:\n",
    "        return round(self.unit_price * self.qty, 2)\n",
    "\n",
    "@dataclass\n",
    "class Order:\n",
    "    id: str\n",
    "    created_at: str\n",
    "    items: List[OrderItem]\n",
    "    subtotal: float\n",
    "    tax: float\n",
    "    discount: float\n",
    "    total: float\n",
    "    payment_method: str\n",
    "    amount_received: float\n",
    "    change_due: float\n",
    "\n",
    "# -------------------- Storage Layer --------------------\n",
    "class Storage:\n",
    "    def __init__(self):\n",
    "        ensure_data_dir()\n",
    "        self.menu: Dict[str, MenuItem] = {}\n",
    "        self.orders: List[Order] = []\n",
    "        self.config = {}\n",
    "        self._load_all()\n",
    "\n",
    "    def _load_all(self):\n",
    "        menu_data = load_json(MENU_FILE, default=[])\n",
    "        orders_data = load_json(ORDERS_FILE, default=[])\n",
    "        config_data = load_json(CONFIG_FILE, default={\"tax_rate\": 5.0, \"default_discount\": 0.0, \"currency\": \"₹\"})\n",
    "\n",
    "        if not menu_data:\n",
    "            # Preloaded Menu with Prices\n",
    "            seed = [\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Espresso\", \"category\": \"Beverage\", \"price\": 120.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Cappuccino\", \"category\": \"Beverage\", \"price\": 160.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Cold Coffee\", \"category\": \"Beverage\", \"price\": 150.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Masala Tea\", \"category\": \"Beverage\", \"price\": 60.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Veg Sandwich\", \"category\": \"Food\", \"price\": 140.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Cheese Sandwich\", \"category\": \"Food\", \"price\": 170.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"French Fries\", \"category\": \"Food\", \"price\": 100.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Veg Burger\", \"category\": \"Food\", \"price\": 180.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Chocolate Brownie\", \"category\": \"Dessert\", \"price\": 110.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Ice Cream Scoop\", \"category\": \"Dessert\", \"price\": 90.0, \"available\": True},\n",
    "                {\"id\": str(uuid.uuid4()), \"name\": \"Muffin\", \"category\": \"Dessert\", \"price\": 75.0, \"available\": True},\n",
    "            ]\n",
    "            save_json(MENU_FILE, seed)\n",
    "            menu_data = seed\n",
    "\n",
    "        self.menu = {m[\"id\"]: MenuItem(**m) for m in menu_data}\n",
    "        self.orders = [Order(**o) for o in orders_data]\n",
    "        self.config = config_data\n",
    "        self._persist_all()\n",
    "\n",
    "    def _persist_all(self):\n",
    "        save_json(MENU_FILE, [asdict(m) for m in self.menu.values()])\n",
    "        save_json(ORDERS_FILE, [asdict(o) for o in self.orders])\n",
    "        save_json(CONFIG_FILE, self.config)\n",
    "\n",
    "    # Menu operations\n",
    "    def add_menu_item(self, name, category, price) -> MenuItem:\n",
    "        item = MenuItem(id=str(uuid.uuid4()), name=name, category=category, price=float(price), available=True)\n",
    "        self.menu[item.id] = item\n",
    "        self._persist_all()\n",
    "        return item\n",
    "\n",
    "    def update_menu_item(self, item_id, **updates):\n",
    "        item = self.menu.get(item_id)\n",
    "        if not item:\n",
    "            raise ValueError(\"Item not found\")\n",
    "        for k, v in updates.items():\n",
    "            if hasattr(item, k) and v is not None:\n",
    "                setattr(item, k, v if k != \"price\" else float(v))\n",
    "        self._persist_all()\n",
    "\n",
    "    def delete_menu_item(self, item_id):\n",
    "        if item_id in self.menu:\n",
    "            del self.menu[item_id]\n",
    "            self._persist_all()\n",
    "\n",
    "    # Order operations\n",
    "    def add_order(self, order: Order):\n",
    "        self.orders.append(order)\n",
    "        self._persist_all()\n",
    "\n",
    "    def set_tax_rate(self, rate_percent: float):\n",
    "        self.config[\"tax_rate\"] = float(rate_percent)\n",
    "        self._persist_all()\n",
    "\n",
    "    def set_default_discount(self, rate_percent: float):\n",
    "        self.config[\"default_discount\"] = float(rate_percent)\n",
    "        self._persist_all()\n",
    "\n",
    "    def set_currency(self, symbol: str):\n",
    "        self.config[\"currency\"] = symbol\n",
    "        self._persist_all()\n",
    "\n",
    "# -------------------- Utility & UI helpers --------------------\n",
    "def clear():\n",
    "    os.system(\"cls\" if os.name == \"nt\" else \"clear\")\n",
    "\n",
    "def pause():\n",
    "    input(\"\\nPress Enter to continue...\")\n",
    "\n",
    "def fmt_money(x: float, currency: str) -> str:\n",
    "    return f\"{currency}{x:,.2f}\"\n",
    "\n",
    "def print_menu_items(storage: Storage):\n",
    "    print(\"ID   | Category     | Name                  | Price | Avail\")\n",
    "    print(\"-\"*66)\n",
    "    for idx, item in enumerate(storage.menu.values(), start=1):\n",
    "        print(f\"{idx:>3}  | {item.category[:12]:<12} | {item.name[:20]:<20} | {item.price:>6.2f} | {'Yes' if item.available else 'No '}\")\n",
    "    print()\n",
    "\n",
    "def pick_menu_item(storage: Storage) -> Optional[str]:\n",
    "    items = list(storage.menu.values())\n",
    "    if not items:\n",
    "        print(\"No menu items. Add some first.\")\n",
    "        return None\n",
    "    while True:\n",
    "        try:\n",
    "            choice = input(\"Enter item number (or blank to stop): \").strip()\n",
    "            if choice == \"\":\n",
    "                return None\n",
    "            idx = int(choice) - 1\n",
    "            if 0 <= idx < len(items):\n",
    "                return items[idx].id\n",
    "            else:\n",
    "                print(\"Invalid number.\")\n",
    "        except ValueError:\n",
    "            print(\"Please enter a valid number.\")\n",
    "\n",
    "def input_float(prompt: str, default: Optional[float]=None) -> float:\n",
    "    while True:\n",
    "        txt = input(prompt).strip()\n",
    "        if txt == \"\" and default is not None:\n",
    "            return float(default)\n",
    "        try:\n",
    "            return float(txt)\n",
    "        except ValueError:\n",
    "            print(\"Enter a number, please.\")\n",
    "\n",
    "# -------------------- POS Flow --------------------\n",
    "def start_new_order(storage: Storage):\n",
    "    currency = storage.config.get(\"currency\", \"₹\")\n",
    "    order_items: List[OrderItem] = []\n",
    "    while True:\n",
    "        clear()\n",
    "        print(\"=== New Order ===\\n\")\n",
    "        print_menu_items(storage)\n",
    "        item_id = pick_menu_item(storage)\n",
    "        if not item_id:\n",
    "            break\n",
    "        item = storage.menu[item_id]\n",
    "        if not item.available:\n",
    "            print(\"Sorry, that item is marked unavailable.\")\n",
    "            pause()\n",
    "            continue\n",
    "        qty = int(input_float(f\"Qty for '{item.name}' (default 1): \", default=1))\n",
    "        note = input(\"Add note (leave blank if none): \").strip()\n",
    "        order_items.append(OrderItem(item_id=item.id, name=item.name, unit_price=item.price, qty=qty, note=note))\n",
    "        more = input(\"Add another item? (y/n): \").strip().lower()\n",
    "        if more != \"y\":\n",
    "            break\n",
    "\n",
    "    if not order_items:\n",
    "        print(\"No items added. Order cancelled.\")\n",
    "        pause()\n",
    "        return\n",
    "\n",
    "    subtotal = round(sum(i.total for i in order_items), 2)\n",
    "    tax_rate = storage.config.get(\"tax_rate\", 5.0)\n",
    "    disc_rate = storage.config.get(\"default_discount\", 0.0)\n",
    "\n",
    "    print(f\"\\nCurrent Subtotal: {fmt_money(subtotal, currency)}\")\n",
    "    custom_disc = input_float(f\"Discount % (Enter for default {disc_rate}%): \", default=disc_rate)\n",
    "    tax = round(subtotal * (tax_rate/100.0), 2)\n",
    "    discount = round(subtotal * (custom_disc/100.0), 2)\n",
    "    total = round(subtotal + tax - discount, 2)\n",
    "\n",
    "    print(f\"Tax @ {tax_rate}%: {fmt_money(tax, currency)}\")\n",
    "    print(f\"Discount @ {custom_disc}%: -{fmt_money(discount, currency)}\")\n",
    "    print(f\"Total: {fmt_money(total, currency)}\")\n",
    "\n",
    "    pm = input(\"Payment method (cash/card/upi) [cash]: \").strip().lower() or \"cash\"\n",
    "    amount_received = input_float(\"Amount received: \", default=total)\n",
    "    change_due = round(amount_received - total, 2)\n",
    "\n",
    "    order = Order(\n",
    "        id=str(uuid.uuid4())[:8],\n",
    "        created_at=datetime.now().isoformat(timespec=\"seconds\"),\n",
    "        items=order_items,\n",
    "        subtotal=subtotal,\n",
    "        tax=tax,\n",
    "        discount=discount,\n",
    "        total=total,\n",
    "        payment_method=pm,\n",
    "        amount_received=amount_received,\n",
    "        change_due=change_due\n",
    "    )\n",
    "    storage.add_order(order)\n",
    "    clear()\n",
    "    print(render_receipt(order, storage))\n",
    "    pause()\n",
    "\n",
    "def render_receipt(order: Order, storage: Storage) -> str:\n",
    "    currency = storage.config.get(\"currency\", \"₹\")\n",
    "    lines = []\n",
    "    lines.append(\"=\"*34)\n",
    "    lines.append(\"        CAFE RECEIPT\")\n",
    "    lines.append(\"=\"*34)\n",
    "    lines.append(f\"Order ID : {order.id}\")\n",
    "    lines.append(f\"Date     : {order.created_at}\")\n",
    "    lines.append(\"-\"*34)\n",
    "    lines.append(f\"{'Item':<16}{'Qty':>3} {'Price':>6} {'Total':>7}\")\n",
    "    lines.append(\"-\"*34)\n",
    "    for it in order.items:\n",
    "        nm = (it.name[:16]) if len(it.name) > 16 else it.name\n",
    "        lines.append(f\"{nm:<16}{it.qty:>3} {it.unit_price:>6.2f} {it.total:>7.2f}\")\n",
    "        if it.note:\n",
    "            note = (' ' * 2) + f\"# {it.note}\"\n",
    "            lines.append(note[:34])\n",
    "    lines.append(\"-\"*34)\n",
    "    lines.append(f\"{'Subtotal':<24}{fmt_money(order.subtotal, currency):>10}\")\n",
    "    lines.append(f\"{'Tax':<24}{fmt_money(order.tax, currency):>10}\")\n",
    "    lines.append(f\"{'Discount':<24}-{fmt_money(order.discount, currency):>10}\")\n",
    "    lines.append(f\"{'TOTAL':<24}{fmt_money(order.total, currency):>10}\")\n",
    "    lines.append(\"-\"*34)\n",
    "    lines.append(f\"Paid via: {order.payment_method.upper()}\")\n",
    "    lines.append(f\"Received: {fmt_money(order.amount_received, currency)}\")\n",
    "    lines.append(f\"Change  : {fmt_money(order.change_due, currency)}\")\n",
    "    lines.append(\"=\"*34)\n",
    "    lines.append(\"  Thank you! See you again  \")\n",
    "    lines.append(\"=\"*34)\n",
    "    return \"\\n\".join(lines)\n",
    "\n",
    "def view_orders(storage: Storage):\n",
    "    clear()\n",
    "    if not storage.orders:\n",
    "        print(\"No orders yet.\")\n",
    "        pause()\n",
    "        return\n",
    "    print(\"=== Order History ===\\n\")\n",
    "    print(f\"{'ID':<8} {'Date':<19} {'Items':>5} {'Total':>10}\")\n",
    "    print(\"-\"*48)\n",
    "    for o in storage.orders[-100:]:  # last 100\n",
    "        print(f\"{o.id:<8} {o.created_at:<19} {len(o.items):>5} {o.total:>10.2f}\")\n",
    "    print()\n",
    "    # Daily summary\n",
    "    today = date.today().isoformat()\n",
    "    t_sub = t_tax = t_disc = t_tot = 0.0\n",
    "    count = 0\n",
    "    for o in storage.orders:\n",
    "        if o.created_at.startswith(today):\n",
    "            t_sub += o.subtotal; t_tax += o.tax; t_disc += o.discount; t_tot += o.total; count += 1\n",
    "    if count:\n",
    "        print(\"--- Today's Summary ---\")\n",
    "        c = storage.config.get(\"currency\", \"₹\")\n",
    "        print(f\"Orders: {count}\")\n",
    "        print(f\"Gross : {fmt_money(t_sub, c)}  Tax: {fmt_money(t_tax, c)}  Disc: -{fmt_money(t_disc, c)}\")\n",
    "        print(f\"Net   : {fmt_money(t_tot, c)}\")\n",
    "    pause()\n",
    "\n",
    "def settings(storage: Storage):\n",
    "    clear()\n",
    "    while True:\n",
    "        clear()\n",
    "        print(\"=== Settings ===\")\n",
    "        print(f\"1) Tax rate [%]: {storage.config.get('tax_rate', 5.0)}\")\n",
    "        print(f\"2) Default discount [%]: {storage.config.get('default_discount', 0.0)}\")\n",
    "        print(f\"3) Currency symbol: {storage.config.get('currency', '₹')}\")\n",
    "        print(\"4) Back\")\n",
    "        choice = input(\"Choose: \").strip()\n",
    "        if choice == \"1\":\n",
    "            storage.set_tax_rate(input_float(\"New tax rate %: \"))\n",
    "        elif choice == \"2\":\n",
    "            storage.set_default_discount(input_float(\"New default discount %: \"))\n",
    "        elif choice == \"3\":\n",
    "            sym = input(\"New currency symbol (e.g., ₹, $, €): \").strip() or \"₹\"\n",
    "            storage.set_currency(sym)\n",
    "        elif choice == \"4\":\n",
    "            return\n",
    "\n",
    "def manage_menu(storage: Storage):\n",
    "    while True:\n",
    "        clear()\n",
    "        print(\"=== Manage Menu ===\\n\")\n",
    "        print_menu_items(storage)\n",
    "        print(\"1) Add item  2) Edit item  3) Delete item  4) Toggle availability  5) Back\")\n",
    "        choice = input(\"Choose: \").strip()\n",
    "        if choice == \"1\":\n",
    "            name = input(\"Name: \").strip()\n",
    "            category = input(\"Category (Beverage/Food/Dessert): \").strip() or \"Other\"\n",
    "            price = input_float(\"Price: \")\n",
    "            storage.add_menu_item(name, category, price)\n",
    "        elif choice == \"2\":\n",
    "            item_id = pick_menu_item(storage)\n",
    "            if item_id:\n",
    "                name = input(\"New name (Enter to keep): \").strip() or None\n",
    "                category = input(\"New category (Enter to keep): \").strip() or None\n",
    "                price_str = input(\"New price (Enter to keep): \").strip()\n",
    "                price = float(price_str) if price_str else None\n",
    "                storage.update_menu_item(item_id, name=name, category=category, price=price)\n",
    "        elif choice == \"3\":\n",
    "            item_id = pick_menu_item(storage)\n",
    "            if item_id:\n",
    "                storage.delete_menu_item(item_id)\n",
    "        elif choice == \"4\":\n",
    "            item_id = pick_menu_item(storage)\n",
    "            if item_id:\n",
    "                item = storage.menu[item_id]\n",
    "                storage.update_menu_item(item_id, available=not item.available)\n",
    "        elif choice == \"5\":\n",
    "            return\n",
    "\n",
    "def main():\n",
    "    storage = Storage()\n",
    "    while True:\n",
    "        clear()\n",
    "        print(\"=== Cafe Management System ===\\n\")\n",
    "        print(\"1) New Order\")\n",
    "        print(\"2) Manage Menu\")\n",
    "        print(\"3) View Orders & Today's Summary\")\n",
    "        print(\"4) Settings (Tax/Discount/Currency)\")\n",
    "        print(\"5) Print Last Receipt\")\n",
    "        print(\"6) Exit\")\n",
    "        choice = input(\"Choose an option: \").strip()\n",
    "        if choice == \"1\":\n",
    "            start_new_order(storage)\n",
    "        elif choice == \"2\":\n",
    "            manage_menu(storage)\n",
    "        elif choice == \"3\":\n",
    "            view_orders(storage)\n",
    "        elif choice == \"4\":\n",
    "            settings(storage)\n",
    "        elif choice == \"5\":\n",
    "            clear()\n",
    "            if storage.orders:\n",
    "                print(render_receipt(storage.orders[-1], storage))\n",
    "            else:\n",
    "                print(\"No orders yet.\")\n",
    "            pause()\n",
    "        elif choice == \"6\":\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid option.\")\n",
    "            pause()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    try:\n",
    "        main()\n",
    "    except KeyboardInterrupt:\n",
    "        print(\"\\nExiting...\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bbac96c-94b0-4e3d-8d74-10d4bda54043",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
